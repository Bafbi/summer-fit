// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String  @db.ObjectId

    @@index([name])
}

model Images {
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
   name      String 
   url       String
   salleId     String   @db.ObjectId
   salle       Salle    @relation(fields: [salleId], references: [id]) 
}

model Machine {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    nbr_machine   Int
    salleId     String   @db.ObjectId
    salle       Salle    @relation(fields: [salleId], references: [id])
}

model Salle {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    altitude  Int
    longitude Int 
    capacite  Int
    nbr_coach Int
    num_tel   String
    heure_ouverture String
    heure_fermeture String
    machine   Machine[]
    images    Images[]
    reservation Reservation[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Reservation {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    date      DateTime
    salleId     String   @db.ObjectId
    salle       Salle    @relation(fields: [salleId], references: [id])
    userId       String   @db.ObjectId @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId 
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    COACH
    ADMIN
}

enum Abonnement {
    BRONZE
    ARGENT
    OR
    DIAMANT
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role?
    abonnement    Abonnement?
    posts         Post[]
    reservations  Reservation?
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
